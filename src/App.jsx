
import React, { useEffect, useMemo, useRef, useState } from 'react'
const clamp = (v, a, b) => Math.min(b, Math.max(a, v));
const rand = (a = 0, b = 1) => a + Math.random() * (b - a);
const hashSignature = (str) => { let h = 2166136261 >>> 0; for (let i=0;i<str.length;i++){ h^=str.charCodeAt(i); h=Math.imul(h,16777619);} return (h>>>0).toString(36) }
const cross = (ax, ay, bx, by) => ax * by - ay * bx;
function computeTurnCounts(points){ let L=0,R=0; for(let i=1;i<points.length-1;i++){ const a=points[i-1],b=points[i],c=points[i+1]; const z=cross(b.x-a.x,b.y-a.y,c.x-b.x,c.y-b.y); if(z>0) R++; else if(z<0) L++; } return {left:L,right:R} }
function bounds(points){ let minX=Infinity,minY=Infinity,maxX=-Infinity,maxY=-Infinity; points.forEach(p=>{minX=Math.min(minX,p.x);maxX=Math.max(maxX,p.x);minY=Math.min(minY,p.y);maxY=Math.max(maxY,p.y)}); return {minX,minY,maxX,maxY,w:maxX-minX,h:maxY-minY} }
function normalize(points,w,h,margin=32){ const b=bounds(points); const sx=(w-2*margin)/(b.w||1), sy=(h-2*margin)/(b.h||1); const s=Math.min(sx,sy); return points.map(p=>({x:margin+(p.x-b.minX)*s, y:margin+(p.y-b.minY)*s})) }
function makeProblem({difficulty,w,h}){ const P={ easy:{tMin:5,tMax:7,aMin:35,aMax:135,lMin:80,lMax:120,window:5,speed:850}, medium:{tMin:7,tMax:9,aMin:30,aMax:135,lMin:70,lMax:110,window:3,speed:650}, hard:{tMin:9,tMax:12,aMin:25,aMax:140,lMin:60,lMax:100,window:2,speed:520}}[difficulty]; const turns=Math.floor(rand(P.tMin,P.tMax+1)); const N=turns+1; let theta=rand(0,Math.PI*2); if(Math.random()<.6) theta=rand(-.25*Math.PI,.25*Math.PI); const pts=[{x:0,y:0}], signed=[]; for(let i=0;i<N;i++){ const len=rand(P.lMin,P.lMax); const dx=Math.cos(theta)*len, dy=Math.sin(theta)*len; pts.push({x:pts[pts.length-1].x+dx, y:pts[pts.length-1].y+dy}); if(i<N-1){ const sign=Math.random()<.5?-1:1; const step=rand(P.aMin,P.aMax)*(Math.PI/180); theta+=sign*step; signed.push(sign*step); } } const norm=normalize(pts,w,h,28).map(p=>({x:p.x+rand(-.5,.5), y:p.y+rand(-.5,.5)})); const counts=computeTurnCounts(norm); const instruction=Math.random()<.5?'L':'R'; const coarse=signed.map(a=>(a>=0?'R':'L')+String.fromCharCode(97+Math.floor((Math.abs(a)/Math.PI)*25))).join(''); const signature=hashSignature(`${coarse}|${turns}|${Math.round(norm[1].x)}${Math.round(norm[1].y)}`); return {points:norm,counts,instruction,window:P.window,speed:P.speed,signature,turns} }
function ArrowCanvas({problem,step,highlightTurns=null}){ const ref=useRef(null); const {points,window}=problem; useEffect(()=>{ const c=ref.current; if(!c) return; const ctx=c.getContext('2d'); const w=c.width,h=c.height; ctx.clearRect(0,0,w,h); ctx.lineCap='round'; ctx.lineJoin='round'; const last=Math.min(step,points.length-1); const first=Math.max(1,last-window); for(let i=first;i<=last;i++){ const age=last-i; const alpha=1-age/(window+1); ctx.strokeStyle=`rgba(40,40,40,${0.2+0.8*alpha})`; ctx.lineWidth=4+Math.max(0,2-age); ctx.beginPath(); ctx.moveTo(points[i-1].x,points[i-1].y); ctx.lineTo(points[i].x,points[i].y); ctx.stroke(); } if(last>=1){ const end=points[last], prev=points[last-1]; const ang=Math.atan2(end.y-prev.y,end.x-prev.x); const size=10; ctx.fillStyle='#343a40'; ctx.beginPath(); ctx.moveTo(end.x,end.y); ctx.lineTo(end.x-Math.cos(ang-0.6)*size,end.y-Math.sin(ang-0.6)*size); ctx.lineTo(end.x-Math.cos(ang+0.6)*size,end.y-Math.sin(ang+0.6)*size); ctx.closePath(); ctx.fill(); } if(highlightTurns){ for(let i=1;i<points.length-1;i++){ const a=points[i-1], b=points[i], c=points[i+1]; const z= (b.x-a.x)*(c.y-b.y) - (b.y-a.y)*(c.x-b.x); const isR = z>0; const show = highlightTurns==='R'?isR:!isR; if(show){ ctx.beginPath(); ctx.fillStyle='rgba(16,185,129,.9)'; ctx.arc(b.x,b.y,5,0,Math.PI*2); ctx.fill(); } } } },[points,step,window,highlightTurns]); return <canvas ref={ref} width={720} height={460} className="w-full h-[360px] md:h-[460px] rounded-2xl border border-slate-200 bg-white shadow-sm" /> }
export default function App(){ const [difficulty,setDifficulty]=useState('easy'); const [mode,setMode]=useState('menu'); const [phase,setPhase]=useState('anim'); const [idx,setIdx]=useState(0); const [score,setScore]=useState(0); const [answer,setAnswer]=useState(''); const [highlight,setHighlight]=useState(null); const usedRef=useRef(new Set((()=>{ try{return JSON.parse(sessionStorage.getItem('vlr-used')||'[]')}catch{return []} })())); const W=720,H=460; const problem=useMemo(()=>{ let tries=0,p; do{ p=makeProblem({difficulty,w:W,h:H}); tries++; if(tries>40) break; } while(usedRef.current.has(p.signature)); usedRef.current.add(p.signature); sessionStorage.setItem('vlr-used', JSON.stringify(Array.from(usedRef.current))); return p; },[idx,difficulty]); const [step,setStep]=useState(1); useEffect(()=>setStep(1),[problem.signature]); useEffect(()=>{ if(mode==='menu') return; setPhase('anim'); setHighlight(null); setAnswer(''); const total=problem.points.length-1; const t=setInterval(()=>{ setStep(s=>{ if(s>=total){ clearInterval(t); setPhase('answer'); return total; } return s+1; }); }, problem.speed); return ()=>clearInterval(t); },[mode,problem]); const correct = problem.instruction==='R'?problem.counts.right:problem.counts.left; const submit=()=>{ if(phase!=='answer') return; const val=parseInt(String(answer).trim(),10); const ok=Number.isFinite(val)&&val===correct; if(mode==='test'&&ok) setScore(s=>s+1); setPhase('feedback'); setHighlight(problem.instruction); }; const next=()=>{ if(mode==='test' && (idx+1)>=20){ setPhase('done'); return; } setIdx(i=>i+1); }; const percent = mode==='test'? Math.round((score/Math.max(1,Math.min(idx,20)))*100):0; return (<div className="min-h-screen w-full bg-slate-50 text-slate-800"><div className="mx-auto max-w-6xl px-4 py-6"><header className="flex items-center justify-between gap-4"><h1 className="text-2xl md:text-3xl font-semibold tracking-tight">Spatial Orientation (VLR)</h1><div className="flex items-center gap-2">{['easy','medium','hard'].map(d=>(<button key={d} onClick={()=>setDifficulty(d)} className={`px-3 py-1.5 rounded-full text-sm border ${difficulty===d?'bg-slate-900 text-white border-slate-900':'bg-white hover:bg-slate-100 border-slate-200'}`} disabled={mode!=='menu'}>{d[0].toUpperCase()+d.slice(1)}</button>))}</div></header>{mode==='menu'? (<div className="grid md:grid-cols-3 gap-6 mt-6"><div className="md:col-span-2 bg-white rounded-2xl border border-slate-200 shadow-sm p-4 md:p-6 relative overflow-hidden"><div className="absolute right-4 top-4 text-5xl font-bold text-slate-300 select-none">{problem.instruction}</div><ArrowCanvas problem={problem} step={step} /><p className="mt-4 text-sm text-slate-600 leading-relaxed">Tel <span className="font-semibold">{problem.instruction==='L'?'linkse':'rechtse'}</span> bochten; oudere segmenten vervagen en verdwijnen.</p></div><div className="space-y-3"><div className="bg-white rounded-2xl border border-slate-200 shadow-sm p-4"><div className="text-xs uppercase tracking-wider text-slate-400">Duur</div><div className="mt-1 text-slate-700">20 vragen (testmodus)</div></div><div className="bg-white rounded-2xl border border-slate-200 shadow-sm p-4"><div className="text-xs uppercase tracking-wider text-slate-400">Compatibiliteit</div><div className="mt-1 text-slate-700">Desktop, tablet en mobiel.</div></div><div className="grid grid-cols-2 gap-3"><button onClick={()=>setMode('practice')} className="rounded-2xl py-2.5 bg-emerald-600 text-white font-medium hover:bg-emerald-700">Oefenen</button><button onClick={()=>{ setMode('test'); setIdx(0); setScore(0); }} className="rounded-2xl py-2.5 bg-slate-900 text-white font-medium hover:bg-slate-800">Start test</button></div></div></div>):(<div className="mt-6 grid md:grid-cols-3 gap-6"><div className="md:col-span-2 bg-white rounded-2xl border border-slate-200 shadow-sm p-4 md:p-6 relative"><div className="absolute right-4 top-4 text-5xl font-bold text-slate-300 select-none">{problem.instruction}</div><ArrowCanvas problem={problem} step={step} highlightTurns={highlight} /><div className="mt-4 flex flex-col md:flex-row md:items-center gap-3">{phase==='anim' && (<div className="text-slate-500 text-sm">Kijk goedâ€¦ tel de <span className="font-semibold">{problem.instruction==='L'?'linkse':'rechtse'}</span> bochten.</span></div>)}{phase==='answer' && (<div className="flex items-center gap-2"><input type="number" inputMode="numeric" className="w-28 rounded-xl border border-slate-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-slate-400" placeholder="Antwoord" value={answer} onChange={e=>setAnswer(e.target.value)} onKeyDown={e=>{ if(e.key==='Enter') submit() }} autoFocus /><button onClick={submit} className="rounded-xl px-4 py-2 bg-slate-900 text-white font-medium hover:bg-slate-800">Indienen</button>{mode==='practice' && (<button onClick={()=>setHighlight(problem.instruction)} className="rounded-xl px-3 py-2 border border-slate-300 hover:bg-slate-50">Toon bochten</button>)}</div>)}{phase==='feedback' && (<div className="flex items-center gap-3 text-sm"><div className="px-3 py-2 rounded-xl bg-slate-100">Correct: <span className="font-semibold">{correct}</span></div><button onClick={next} className="rounded-xl px-3 py-2 bg-slate-900 text-white hover:bg-slate-800">Volgende</button></div>)}{phase==='done' && (<div className="flex items-center gap-3"><div className="text-slate-700">Klaar! Score: <span className="font-semibold">{score}/20</span> ({Math.round((score/20)*100)}%).</div><button onClick={()=>{ setMode('menu'); setPhase('anim'); }} className="rounded-xl px-3 py-2 border border-slate-300 hover:bg-slate-50">Menu</button></div>)}</div></div><aside className="space-y-4"><div className="bg-white rounded-2xl border border-slate-200 shadow-sm p-4"><div className="flex items-center justify-between"><div><div className="text-xs uppercase tracking-wider text-slate-400">Moeilijkheid</div><div className="mt-1 font-medium capitalize">{difficulty}</div></div>{mode==='test' && (<div className="text-right"><div className="text-xs uppercase tracking-wider text-slate-400">Vraag</div><div className="mt-1 font-medium">{Math.min(idx+1,20)} / 20</div></div>)}</div></div>{mode==='test' && (<div className="bg-white rounded-2xl border border-slate-200 shadow-sm p-4"><div className="text-xs uppercase tracking-wider text-slate-400">Jouw testscores</div><div className="mt-2 text-3xl font-semibold">{Math.max(0,percent)}<span className="text-lg align-super">%</span></div><div className="text-xs text-slate-500 mt-1">Live na elke vraag.</div></div>)}<div className="bg-white rounded-2xl border border-slate-200 shadow-sm p-4 text-sm leading-relaxed text-slate-600"><div className="text-xs uppercase tracking-wider text-slate-400 mb-1">Hints</div><ul className="list-disc pl-5 space-y-1"><li>Concentreer op de knikpunten; negeer rechte stukken.</li><li>Tel alleen de letter bovenin: L = links, R = rechts.</li><li>Segmenten verdwijnen; de zichtbare \"window\" schuift mee.</li><li>Geen herhalingen: elke reeks is uniek binnen je sessie.</li></ul></div><div className="flex gap-2"><button onClick={()=>{ setMode('menu'); }} className="flex-1 rounded-2xl py-2 border border-slate-300 hover:bg-slate-50">Menu</button><button onClick={()=>{ setIdx(i=>i+1) }} className="flex-1 rounded-2xl py-2 border border-slate-300 hover:bg-slate-50" title="Nieuwe seed">Vernieuw</button></div></aside></div>)}</div></div>); }
